name: Create GitHub Release

on:
  push:
    tags:
      - 'v*.*.*'      # Matches v1.0.0, v0.1.2, etc.
      - 'v*.*.*-*'    # Matches v1.0.0-alpha, v0.1.2-beta.1, etc.

jobs:
  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    outputs:
      release_archive_name: ${{ steps.get_archive_name.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: '1.21' # Assuming Go, adjust if different build tools are needed

      - name: Extract version from tag
        id: get_version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT # Removes 'v' prefix if present

      - name: Build application
        run: make CLI_VERSION=${{ steps.get_version.outputs.version }}

      - name: Determine Archive Name
        id: get_archive_name
        # Produces an archive name like copa-lineaje-scanner-1.0.0.tar.gz
        # Adjust the executable name 'copa-lineaje-scanner' if it's different.
        run: echo "name=copa-lineaje-scanner-${{ steps.get_version.outputs.version }}.tar.gz" >> $GITHUB_OUTPUT

      - name: Create Release Archive
        # This assumes 'copa-lineaje-scanner' is the main executable/file to archive.
        # And that it's located in dist/linux_amd64/release/
        # Adjust if your build process places artifacts elsewhere or if there are multiple files.
        run: |
          tar -czvf ${{ steps.get_archive_name.outputs.name }} -C dist/linux_amd64/release/ .
          # If you need to include specific files, list them:
          # tar -czvf ${{ steps.get_archive_name.outputs.name }} dist/linux_amd64/release/copa-lineaje-scanner dist/linux_amd64/release/another-file

      - name: Upload temporary build artifact (archive)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.get_archive_name.outputs.name }} # Artifact name in GitHub UI
          path: ${{ steps.get_archive_name.outputs.name }} # Path to the file to upload

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # Depends on the build job completing successfully
    permissions:
      contents: write # Required to create releases
    steps:
      - name: Download release archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.release_archive_name }}
          # No path needed, it downloads to the current directory by default

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ needs.build.outputs.release_archive_name }}
          # The release will be created for the tag that triggered the workflow.
          # GITHUB_TOKEN is automatically provided.
          # You can customize the release name and body if needed, e.g.:
          # name: Release ${{ github.ref_name }}
          # body: "Automated release for version ${{ github.ref_name }}"
          # Prerelease will be marked if the tag contains a hyphen (e.g., v1.0.0-alpha)
          # This is a default behavior of softprops/action-gh-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
